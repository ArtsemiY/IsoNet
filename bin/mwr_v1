#!/usr/bin/env python3

from mwr.util import readMrcNumpy,readHeader
from mwr.simulation import TwoDPsf,TrDPsf
from mwr.util.generate import DataPairs
import numpy as np
from tifffile import imread,imsave
from mwr.models import unet
import os

def mrcRead(mrc):
    data=readMrcNumpy(mrc)
    header=readHeader(mrc)
    return data,header

def get_patches(orig_data,outName='train_and_test_data.npz',npathcesper=100,patches_sidelen=128,rotate=False,prefilter=None \
    ,noisefilter=False,type=None):

    #imgpre.imsave(filename+'_convoluted',convoluted)

    pair=DataPairs()
    pair.set_dataY(orig_data)
    pair.set_dataX(orig_data)
    if prefilter!=None:
        pair.prefilter(prefilter[0],prefilter[1])
    if rotate==True :
        pair.rotate()
    sp=pair.get_dataX().shape
    twoD_missingwedge=TwoDPsf(sp[1],sp[2])
    pair.set_dataX(twoD_missingwedge.apply(pair.get_dataX()))
    pair.create_patches(patches_sidelen,npathcesper,withFilter=filter)
    train_data,test_data=pair.create_training_data2D()
    print ('train_data.shape:',train_data[0].shape)
    np.savez(outName,train_data=train_data,test_data=test_data)


def get_cubes(orig_data,outName,ncube=1000,cube_sidelen=64):
    pair = DataPairs()
    pair.set_dataX(orig_data)
    pair.set_dataY(orig_data)
    pair.create_cubes(nCubesPerImg=ncube,cubeSideLen=cube_sidelen)
    threeD_missingwedge=TrDPsf(cube_sidelen)
    pair.set_dataX(threeD_missingwedge.apply(orig_data))
    train_data, test_data=pair.create_training_data3D()
    print ('train_data.shape:', train_data[0].shape)
    np.savez(outName, train_data=train_data, test_data=test_data)




def train_data(fileName, outFile):

    data = np.load(fileName)

    x=data['train_data'][0]
    y=data['train_data'][1]
    x_val=data['test_data'][0]
    y_val=data['test_data'][1]
    unet.train(x,y,(x_val,y_val),outFile)
    

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Process some integers.')
    #parser.add_argument('file', type=str, help='Your mrc file')
    parser.add_argument('rootdir', type=str,help='rootdir')
    parser.add_argument('--weight', type=str, default='weights_last.h5' ,help='Weight file to save')
    parser.add_argument('--data', type=str, default='train_and_test_data' ,help='Data file to save')
    parser.add_argument('--type', type=str, default='rec', help='type of data .mrc or .tif')
    parser.add_argument('--dim', type=str, default='2D', help='training 2D or 3D')
    args = parser.parse_args()

    orig_data = []
    rootdir=args.rootdir
    fileList = os.listdir(rootdir)
    for i in range(len(fileList)):
        print(i)
        path = os.path.join(rootdir, fileList[i])
        mrcFile = readMrcNumpy(path)
        sliced = mrcFile[int(mrcFile.shape[0] * 0.2):int(mrcFile.shape[0] * 0.8)]


        




        if args.dim=='2D':
            get_patches(data,outName=args.data+'2D.npz',npathcesper=50,patches_sidelen=128,rotate=True,prefilter=None \
    ,noisefilter=False,type=None)


            train_data(args.data, args.weight)
'''
    else :
        get_cubes(data,outName=args.data+'3D.npz',ncube=1000,cube_sidelen=64)
        train_data3D(args.data,args.weight)
'''
    

    
