#!/usr/bin/env python3

import numpy as np
from mwr.util import readMrcNumpy
from mwr.util.generate import DataPairs
from mwr.simulation import TwoDPsf, TrDPsf
from mwr.models import unet
from scipy.ndimage.interpolation import rotate
import keras
from mwr.util.norm import normalize
from mwr.util.image import norm_save
from mwr.util.toTile import reform3D,DataWrapper

def get_cubes(settings):
    orig_data = readMrcNumpy(settings.mrc)*-1
    orig_data = np.array(normalize(orig_data))
    orig_data = np.rot90(orig_data, k=1, axes=(0, 1))
    #get_cubes_one(orig_data,settings)
    
    print(orig_data.shape)

    pair = DataPairs()
    pair.set_dataX(orig_data)
    pair.set_dataY(orig_data)


    threeD_missingwedge=TrDPsf(settings.cube_sidelen)
    pair.set_dataX(threeD_missingwedge.apply(orig_data))

    pair.create_cubes(nCubesPerImg=settings.ncube, cubeSideLen=settings.cube_sidelen)
    train_data, test_data=pair.create_training_data3D()
    norm_save('1.tif',train_data[0][0])
    norm_save('2.tif',train_data[1][0])
    print ('train_data.shape:', train_data[0].shape)
    print ('train_data.shape:', train_data[1].shape)
    np.savez(settings.cubes_file, train_data=train_data, test_data=test_data)

def train_data(settings):
    data = np.load(settings.cubes_file)
    x=data['train_data'][0]
    y=data['train_data'][1]
    x_val=data['test_data'][0]
    y_val=data['test_data'][1]
    unet.train3D(x,y,(x_val,y_val),settings.weights_file, settings.epochs, settings.steps_per_epoch, settings.batch_size, settings.ngpus)

def predict2D(settings):

    from tifffile import imsave
    real_data = readMrcNumpy(settings.mrc)*-1
    real_data=real_data[:100,:,:]

def predict(settings):
    real_data = readMrcNumpy(settings.mrc)*-1
    real_data = np.array(normalize(real_data))

    data=np.expand_dims(real_data,axis=-1)
    reform_ins = reform3D(data)
    data = reform_ins.pad_and_crop()
    print('predict data.shape:',data.shape)
    model=keras.models.load_model(settings.weights_file)
    data_gene=DataWrapper(data,8)
    outData=model.predict_generator(data_gene,verbose=1)
    
    outData=reform_ins.restore_from_cubes(outData.reshape(outData.shape[0:-1]))
    norm_save('O.tif',outData)
    return outData



if __name__ == '__main__':
    import os
    os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
    os.environ["CUDA_VISIBLE_DEVICES"]="0"  # specify which GPU(s) to be used
    from settings import Settings3D
    settings = Settings3D()
    if settings.do_preprocess:
        get_cubes(settings)
    if settings.do_training:
        train_data(settings)
    if settings.do_predict:
        predict(settings)

    

    
