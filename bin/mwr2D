#!/usr/bin/env python3

import numpy as np
from mwr.util import readMrcNumpy
from mwr.util.generate import DataPairs
from mwr.simulation import TwoDPsf
from mwr.models import unet
from scipy.ndimage.interpolation import rotate
import keras
from mwr.util.norm import normalize
from mwr.util.image import norm_save

def get_patches(settings):
    orig_data = readMrcNumpy(settings.mrc)*-1
    orig_data = np.array(normalize(orig_data))
    print(orig_data.shape)
    norm_save('data.tif',orig_data)
    pair=DataPairs()
    pair.set_dataY(orig_data)
    pair.set_dataX(orig_data)

    if settings.do_rotate==True :
        pair.rotate(settings.rotate_step)

    sp=pair.get_dataX().shape
    twoD_missingwedge=TwoDPsf(sp[1],sp[2])

    pair.set_dataX(twoD_missingwedge.apply(pair.get_dataX()))

    PatchesX,PatchesY = pair.create_patches(settings.patches_sidelen, settings.npathcesper)
    train_data,test_data=pair.create_training_data2D()

    print ('train_data.shape:',train_data[0].shape)
    if verbose:
        norm_save('trainY.tif',train_data[1])
        norm_save('trainX.tif',train_data[0])
    np.savez(settings.patches_file,train_data=train_data,test_data=test_data)

def train_data(settings):
    data = np.load(settings.patches_file)
    x=data['train_data'][0]
    y=data['train_data'][1]
    x_val=data['test_data'][0]
    y_val=data['test_data'][1]
    unet.train(x,y,(x_val,y_val),settings.weights_file, settings.epochs, settings.steps_per_epoch, settings.batch_size, settings.ngpus)

def predict2D(settings):
    real_data = readMrcNumpy(settings.mrc)*-1
    real_data = np.array(normalize(real_data))
    real_data=real_data[:104,:,:]
    real_data = np.expand_dims(real_data,axis=-1)
    xyz_data=rotate(real_data,angle=90,axes=(0,1))
    print('rotated',xyz_data.shape)
    norm_save('xyz.tif',xyz_data)

    model=keras.models.load_model(settings.weights_file)
    outData=model.predict(xyz_data,batch_size=32,verbose=1)
    norm_save(settings.predicted,outData)
    outData=rotate(outData,angle=-90,axes=(0,1))
    outData=outData.reshape(outData.shape[0:-1])

    return outData


if __name__ == '__main__':
    from settings import Settings
    settings = Settings()
    if settings.do_preprocess:
        get_patches(settings)
    if settings.do_training:
        train_data(settings)
    if settings.do_predict:
        predict2D(settings)

    

    
